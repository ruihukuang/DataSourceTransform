AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to set up an S3-triggered workflow with RDS and Lambda

Resources:
  # Security Group for RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow internal traffic
      VpcId: !ImportValue MyVPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16

  # Secrets Manager Secret
  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: MyRDSSecret
      Description: "RDS master credentials"
      SecretString: !Sub |
        {
          "username": "${MasterUsername}",
          "password": "${MasterUserPassword}"
        }

  # RDS Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      DBName: MyDatabase
      Engine: mysql
      MasterUsername: !Sub '{{resolve:secretsmanager:${RDSSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RDSSecret}:SecretString:password}}'
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup

  # RDS Subnet Group
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !ImportValue MyPrivateSubnetId

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-unique-bucket-name
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt TriggerLambdaFunction.Arn

  # Lambda Function to load data into RDS
  TriggerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: scriptbucket
        S3Key: lambda_function.zip
      Runtime: python3.8
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          ACCOUNT_ID: !Ref AWS::AccountId
          RDS_SECRET_ARN: !Ref RDSSecret

  # Lambda Layer for Dependencies
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: MyDependenciesLayer
      Content:
        S3Bucket: scriptbucket
        S3Key: dependencies_package.zip
      CompatibleRuntimes:
        - python3.8

  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${Fn::ImportValue MyDataBucket1}/*'
                  - !Sub 'arn:aws:s3:::${Fn::ImportValue MyDataBucket2}/*'
        - PolicyName: LambdaRDSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:Connect
                Resource: '*'
        - PolicyName: SecretsManagerAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${RDSSecret}*'

Outputs:
  RDSInstanceEndpoint:
    Description: Endpoint of the RDS Instance
    Value: !GetAtt RDSInstance.Endpoint.Address

  RDSSecretArn:
    Description: ARN of the RDS Secret
    Value: !Ref RDSSecret
    Export:
      Name: MyRDSSecretArn

  LambdaFunctionArn:
    Description: ARN of the Lambda Function
    Value: !GetAtt TriggerLambdaFunction.Arn
    Export:
      Name: MyLambdaFunctionArn
