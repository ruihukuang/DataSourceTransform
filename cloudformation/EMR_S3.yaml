AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to set up an S3-triggered Glue ETL workflow with RDS, Step Functions, and EMR

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MyPublicSubnet

  # Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: MyPrivateSubnet

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet
      AllocationId: !GetAtt EIP.AllocationId

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for EMR
  EMRSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow EMR traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 10.0.0.0/16

  # IAM Role for EMR Cluster with S3 Access
  EMRClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
      Policies:
        - PolicyName: EMRS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${DataBucket1}/*'
                  - !Sub 'arn:aws:s3:::${DataBucket2}/*'

  # EMR Cluster
  EMRCluster:
    Type: AWS::EMR::Cluster
    Properties:
      Name: MyEMRCluster
      Instances:
        InstanceGroups:
          - Name: Master
            Market: ON_DEMAND
            InstanceRole: MASTER
            InstanceType: m3.medium
            InstanceCount: 1
          - Name: Core
            Market: ON_DEMAND
            InstanceRole: CORE
            InstanceType: m3.medium
            InstanceCount: 2
        Ec2SubnetId: !Ref PrivateSubnet
        Ec2KeyName: MyEMR # Ensure this key pair exists
        KeepJobFlowAliveWhenNoSteps: true
      JobFlowRole: !Ref EMRClusterRole
      ServiceRole: !Ref EMRServiceRole
      ReleaseLabel: emr-6.3.0
      Applications:
        - Name: Hadoop
        - Name: Spark
      Configurations:
        - Classification: spark
          Properties:
            maximizeResourceAllocation: "true"
      VisibleToAllUsers: true
      LogUri: !Sub 's3://${DataBucket1}/logs/'

  # IAM Role for EMR Service
  EMRServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: elasticmapreduce.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole

  # First S3 Bucket for scripts
  DataBucket1:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: scriptbucketkuangju87

  # Second S3 Bucket for data
  DataBucket2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: databucketkuangju87

Outputs:
  VPCId:
    Description: The VPC ID
    Value: !Ref VPC
    Export:
      Name: MyVPCId

  PublicSubnetId:
    Description: The Public Subnet ID
    Value: !Ref PublicSubnet
    Export:
      Name: MyPublicSubnetId

  PrivateSubnetId:
    Description: The Private Subnet ID
    Value: !Ref PrivateSubnet
    Export:
      Name: MyPrivateSubnetId

  EMRClusterId:
    Description: The EMR Cluster ID
    Value: !Ref EMRCluster
    Export:
      Name: MyEMRClusterId

  DataBucket1Name:
    Description: The name of the first S3 bucket
    Value: !Ref DataBucket1
    Export:
      Name: MyDataBucket1

  DataBucket2Name:
    Description: The name of the second S3 bucket
    Value: !Ref DataBucket2
    Export:
      Name: MyDataBucket2
